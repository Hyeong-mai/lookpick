{"ast":null,"code":"import { ref, uploadBytes, getDownloadURL, deleteObject, listAll } from \"firebase/storage\";\nimport { storage } from \"./config\";\n\n// 파일 업로드\nexport const uploadFile = async (file, path) => {\n  try {\n    const storageRef = ref(storage, path);\n    const snapshot = await uploadBytes(storageRef, file);\n    const downloadURL = await getDownloadURL(snapshot.ref);\n    return {\n      url: downloadURL,\n      path: snapshot.ref.fullPath,\n      name: file.name,\n      size: file.size,\n      type: file.type\n    };\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 여러 파일 업로드 (서비스 등록용)\nexport const uploadMultipleFiles = async (files, basePath, serviceId = null) => {\n  try {\n    if (serviceId === null && typeof basePath === \"string\") {\n      // 새로운 방식: basePath가 문자열이고 serviceId가 없는 경우\n      const uploadPromises = files.map((file, index) => {\n        const fileName = `${Date.now()}_${index}_${file.name}`;\n        const path = `${basePath}/${fileName}`;\n        return uploadFile(file, path);\n      });\n      const uploadResults = await Promise.all(uploadPromises);\n      return uploadResults;\n    } else {\n      // 기존 방식: 호환성을 위해 유지 (userId, serviceId)\n      const userId = basePath;\n      const uploadPromises = files.map((file, index) => {\n        const fileName = `${Date.now()}_${index}_${file.name}`;\n        const path = `services/${userId}/${serviceId}/${fileName}`;\n        return uploadFile(file, path);\n      });\n      const uploadResults = await Promise.all(uploadPromises);\n      return uploadResults;\n    }\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 사용자 프로필 이미지 업로드\nexport const uploadProfileImage = async (file, userId) => {\n  try {\n    const fileName = `profile_${Date.now()}_${file.name}`;\n    const path = `users/${userId}/profile/${fileName}`;\n    return await uploadFile(file, path);\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 사업자등록증 업로드\nexport const uploadBusinessCertificate = async (file, userId) => {\n  try {\n    const fileName = `business_cert_${Date.now()}_${file.name}`;\n    const path = `users/${userId}/documents/${fileName}`;\n    return await uploadFile(file, path);\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 파일 삭제\nexport const deleteFile = async filePath => {\n  try {\n    const storageRef = ref(storage, filePath);\n    await deleteObject(storageRef);\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 서비스 관련 모든 파일 삭제\nexport const deleteServiceFiles = async (userId, serviceId) => {\n  try {\n    // serviceId가 실제로는 전체 경로일 수 있으므로 유연하게 처리\n    let folderPath;\n    if (serviceId && serviceId.includes(\"/\")) {\n      // 이미 전체 경로인 경우\n      folderPath = serviceId;\n    } else if (userId && serviceId) {\n      // userId와 serviceId가 별도로 제공된 경우\n      folderPath = `services/${userId}/${serviceId}`;\n    } else {\n      // userId만 제공된 경우 (serviceId가 실제로는 경로)\n      folderPath = `services/${userId}`;\n    }\n    const folderRef = ref(storage, folderPath);\n    const listResult = await listAll(folderRef);\n    const deletePromises = listResult.items.map(item => deleteObject(item));\n    await Promise.all(deletePromises);\n    console.log(`파일 삭제 완료: ${folderPath}`);\n  } catch (error) {\n    console.error(\"파일 삭제 실패:\", error);\n    throw error;\n  }\n};\n\n// 파일 다운로드 URL 가져오기\nexport const getFileDownloadURL = async filePath => {\n  try {\n    const storageRef = ref(storage, filePath);\n    const url = await getDownloadURL(storageRef);\n    return url;\n  } catch (error) {\n    throw error;\n  }\n};","map":{"version":3,"names":["ref","uploadBytes","getDownloadURL","deleteObject","listAll","storage","uploadFile","file","path","storageRef","snapshot","downloadURL","url","fullPath","name","size","type","error","uploadMultipleFiles","files","basePath","serviceId","uploadPromises","map","index","fileName","Date","now","uploadResults","Promise","all","userId","uploadProfileImage","uploadBusinessCertificate","deleteFile","filePath","deleteServiceFiles","folderPath","includes","folderRef","listResult","deletePromises","items","item","console","log","getFileDownloadURL"],"sources":["/Users/phillip/application/LookPick/src/firebase/storage.js"],"sourcesContent":["import {\n  ref,\n  uploadBytes,\n  getDownloadURL,\n  deleteObject,\n  listAll,\n} from \"firebase/storage\";\nimport { storage } from \"./config\";\n\n// 파일 업로드\nexport const uploadFile = async (file, path) => {\n  try {\n    const storageRef = ref(storage, path);\n    const snapshot = await uploadBytes(storageRef, file);\n    const downloadURL = await getDownloadURL(snapshot.ref);\n\n    return {\n      url: downloadURL,\n      path: snapshot.ref.fullPath,\n      name: file.name,\n      size: file.size,\n      type: file.type,\n    };\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 여러 파일 업로드 (서비스 등록용)\nexport const uploadMultipleFiles = async (\n  files,\n  basePath,\n  serviceId = null\n) => {\n  try {\n    if (serviceId === null && typeof basePath === \"string\") {\n      // 새로운 방식: basePath가 문자열이고 serviceId가 없는 경우\n      const uploadPromises = files.map((file, index) => {\n        const fileName = `${Date.now()}_${index}_${file.name}`;\n        const path = `${basePath}/${fileName}`;\n        return uploadFile(file, path);\n      });\n\n      const uploadResults = await Promise.all(uploadPromises);\n      return uploadResults;\n    } else {\n      // 기존 방식: 호환성을 위해 유지 (userId, serviceId)\n      const userId = basePath;\n      const uploadPromises = files.map((file, index) => {\n        const fileName = `${Date.now()}_${index}_${file.name}`;\n        const path = `services/${userId}/${serviceId}/${fileName}`;\n        return uploadFile(file, path);\n      });\n\n      const uploadResults = await Promise.all(uploadPromises);\n      return uploadResults;\n    }\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 사용자 프로필 이미지 업로드\nexport const uploadProfileImage = async (file, userId) => {\n  try {\n    const fileName = `profile_${Date.now()}_${file.name}`;\n    const path = `users/${userId}/profile/${fileName}`;\n    return await uploadFile(file, path);\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 사업자등록증 업로드\nexport const uploadBusinessCertificate = async (file, userId) => {\n  try {\n    const fileName = `business_cert_${Date.now()}_${file.name}`;\n    const path = `users/${userId}/documents/${fileName}`;\n    return await uploadFile(file, path);\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 파일 삭제\nexport const deleteFile = async (filePath) => {\n  try {\n    const storageRef = ref(storage, filePath);\n    await deleteObject(storageRef);\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 서비스 관련 모든 파일 삭제\nexport const deleteServiceFiles = async (userId, serviceId) => {\n  try {\n    // serviceId가 실제로는 전체 경로일 수 있으므로 유연하게 처리\n    let folderPath;\n    if (serviceId && serviceId.includes(\"/\")) {\n      // 이미 전체 경로인 경우\n      folderPath = serviceId;\n    } else if (userId && serviceId) {\n      // userId와 serviceId가 별도로 제공된 경우\n      folderPath = `services/${userId}/${serviceId}`;\n    } else {\n      // userId만 제공된 경우 (serviceId가 실제로는 경로)\n      folderPath = `services/${userId}`;\n    }\n\n    const folderRef = ref(storage, folderPath);\n    const listResult = await listAll(folderRef);\n\n    const deletePromises = listResult.items.map((item) => deleteObject(item));\n    await Promise.all(deletePromises);\n\n    console.log(`파일 삭제 완료: ${folderPath}`);\n  } catch (error) {\n    console.error(\"파일 삭제 실패:\", error);\n    throw error;\n  }\n};\n\n// 파일 다운로드 URL 가져오기\nexport const getFileDownloadURL = async (filePath) => {\n  try {\n    const storageRef = ref(storage, filePath);\n    const url = await getDownloadURL(storageRef);\n    return url;\n  } catch (error) {\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}