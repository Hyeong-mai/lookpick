{"ast":null,"code":"import { ref, uploadBytes, getDownloadURL, deleteObject, listAll } from \"firebase/storage\";\nimport { storage } from \"./config\";\n\n// 파일 업로드\nexport const uploadFile = async (file, path) => {\n  try {\n    const storageRef = ref(storage, path);\n    const snapshot = await uploadBytes(storageRef, file);\n    const downloadURL = await getDownloadURL(snapshot.ref);\n    return {\n      url: downloadURL,\n      path: snapshot.ref.fullPath,\n      name: file.name,\n      size: file.size,\n      type: file.type\n    };\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 여러 파일 업로드\nexport const uploadMultipleFiles = async (files, userId, serviceId) => {\n  try {\n    const uploadPromises = files.map((file, index) => {\n      const fileName = `${Date.now()}_${index}_${file.name}`;\n      const path = `services/${userId}/${serviceId}/${fileName}`;\n      return uploadFile(file, path);\n    });\n    const uploadResults = await Promise.all(uploadPromises);\n    return uploadResults;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 사용자 프로필 이미지 업로드\nexport const uploadProfileImage = async (file, userId) => {\n  try {\n    const fileName = `profile_${Date.now()}_${file.name}`;\n    const path = `users/${userId}/profile/${fileName}`;\n    return await uploadFile(file, path);\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 사업자등록증 업로드\nexport const uploadBusinessCertificate = async (file, userId) => {\n  try {\n    const fileName = `business_cert_${Date.now()}_${file.name}`;\n    const path = `users/${userId}/documents/${fileName}`;\n    return await uploadFile(file, path);\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 파일 삭제\nexport const deleteFile = async filePath => {\n  try {\n    const storageRef = ref(storage, filePath);\n    await deleteObject(storageRef);\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 서비스 관련 모든 파일 삭제\nexport const deleteServiceFiles = async (userId, serviceId) => {\n  try {\n    const folderRef = ref(storage, `services/${userId}/${serviceId}`);\n    const listResult = await listAll(folderRef);\n    const deletePromises = listResult.items.map(item => deleteObject(item));\n    await Promise.all(deletePromises);\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 파일 다운로드 URL 가져오기\nexport const getFileDownloadURL = async filePath => {\n  try {\n    const storageRef = ref(storage, filePath);\n    const url = await getDownloadURL(storageRef);\n    return url;\n  } catch (error) {\n    throw error;\n  }\n};","map":{"version":3,"names":["ref","uploadBytes","getDownloadURL","deleteObject","listAll","storage","uploadFile","file","path","storageRef","snapshot","downloadURL","url","fullPath","name","size","type","error","uploadMultipleFiles","files","userId","serviceId","uploadPromises","map","index","fileName","Date","now","uploadResults","Promise","all","uploadProfileImage","uploadBusinessCertificate","deleteFile","filePath","deleteServiceFiles","folderRef","listResult","deletePromises","items","item","getFileDownloadURL"],"sources":["/Users/phillip/application/LookPick/src/firebase/storage.js"],"sourcesContent":["import {\n  ref,\n  uploadBytes,\n  getDownloadURL,\n  deleteObject,\n  listAll,\n} from \"firebase/storage\";\nimport { storage } from \"./config\";\n\n// 파일 업로드\nexport const uploadFile = async (file, path) => {\n  try {\n    const storageRef = ref(storage, path);\n    const snapshot = await uploadBytes(storageRef, file);\n    const downloadURL = await getDownloadURL(snapshot.ref);\n\n    return {\n      url: downloadURL,\n      path: snapshot.ref.fullPath,\n      name: file.name,\n      size: file.size,\n      type: file.type,\n    };\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 여러 파일 업로드\nexport const uploadMultipleFiles = async (files, userId, serviceId) => {\n  try {\n    const uploadPromises = files.map((file, index) => {\n      const fileName = `${Date.now()}_${index}_${file.name}`;\n      const path = `services/${userId}/${serviceId}/${fileName}`;\n      return uploadFile(file, path);\n    });\n\n    const uploadResults = await Promise.all(uploadPromises);\n    return uploadResults;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 사용자 프로필 이미지 업로드\nexport const uploadProfileImage = async (file, userId) => {\n  try {\n    const fileName = `profile_${Date.now()}_${file.name}`;\n    const path = `users/${userId}/profile/${fileName}`;\n    return await uploadFile(file, path);\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 사업자등록증 업로드\nexport const uploadBusinessCertificate = async (file, userId) => {\n  try {\n    const fileName = `business_cert_${Date.now()}_${file.name}`;\n    const path = `users/${userId}/documents/${fileName}`;\n    return await uploadFile(file, path);\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 파일 삭제\nexport const deleteFile = async (filePath) => {\n  try {\n    const storageRef = ref(storage, filePath);\n    await deleteObject(storageRef);\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 서비스 관련 모든 파일 삭제\nexport const deleteServiceFiles = async (userId, serviceId) => {\n  try {\n    const folderRef = ref(storage, `services/${userId}/${serviceId}`);\n    const listResult = await listAll(folderRef);\n\n    const deletePromises = listResult.items.map((item) => deleteObject(item));\n    await Promise.all(deletePromises);\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 파일 다운로드 URL 가져오기\nexport const getFileDownloadURL = async (filePath) => {\n  try {\n    const storageRef = ref(storage, filePath);\n    const url = await getDownloadURL(storageRef);\n    return url;\n  } catch (error) {\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}