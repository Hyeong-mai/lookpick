{"ast":null,"code":"import { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, updateProfile, onAuthStateChanged } from \"firebase/auth\";\nimport { auth, db } from \"./config\";\nimport { doc, setDoc, getDoc } from \"firebase/firestore\";\n\n// 회원가입\nexport const signUp = async (email, password, userInfo) => {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n\n    // 프로필 업데이트\n    await updateProfile(user, {\n      displayName: userInfo.name\n    });\n\n    // Firestore에 사용자 정보 저장\n    await setDoc(doc(db, \"users\", user.uid), {\n      name: userInfo.name,\n      email: userInfo.email,\n      phone: userInfo.phone,\n      companyName: userInfo.companyName,\n      businessNumber: userInfo.businessNumber,\n      representative: userInfo.representative,\n      companyAddress: userInfo.companyAddress,\n      establishmentDate: userInfo.establishmentDate,\n      businessType: userInfo.businessType,\n      businessField: userInfo.businessField,\n      managerName: userInfo.managerName,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    });\n    return user;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 로그인\nexport const signIn = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    return userCredential.user;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 로그아웃\nexport const logOut = async () => {\n  try {\n    await signOut(auth);\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 사용자 정보 가져오기\nexport const getUserInfo = async userId => {\n  try {\n    const userDoc = await getDoc(doc(db, \"users\", userId));\n    if (userDoc.exists()) {\n      return userDoc.data();\n    } else {\n      return null;\n    }\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 인증 상태 변화 감지\nexport const onAuthStateChange = callback => {\n  return onAuthStateChanged(auth, callback);\n};","map":{"version":3,"names":["createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","updateProfile","onAuthStateChanged","auth","db","doc","setDoc","getDoc","signUp","email","password","userInfo","userCredential","user","displayName","name","uid","phone","companyName","businessNumber","representative","companyAddress","establishmentDate","businessType","businessField","managerName","createdAt","Date","updatedAt","error","signIn","logOut","getUserInfo","userId","userDoc","exists","data","onAuthStateChange","callback"],"sources":["/Users/phillip/application/LookPick/src/firebase/auth.js"],"sourcesContent":["import {\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signOut,\n  updateProfile,\n  onAuthStateChanged,\n} from \"firebase/auth\";\nimport { auth, db } from \"./config\";\nimport { doc, setDoc, getDoc } from \"firebase/firestore\";\n\n// 회원가입\nexport const signUp = async (email, password, userInfo) => {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(\n      auth,\n      email,\n      password\n    );\n    const user = userCredential.user;\n\n    // 프로필 업데이트\n    await updateProfile(user, {\n      displayName: userInfo.name,\n    });\n\n    // Firestore에 사용자 정보 저장\n    await setDoc(doc(db, \"users\", user.uid), {\n      name: userInfo.name,\n      email: userInfo.email,\n      phone: userInfo.phone,\n      companyName: userInfo.companyName,\n      businessNumber: userInfo.businessNumber,\n      representative: userInfo.representative,\n      companyAddress: userInfo.companyAddress,\n      establishmentDate: userInfo.establishmentDate,\n      businessType: userInfo.businessType,\n      businessField: userInfo.businessField,\n      managerName: userInfo.managerName,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    });\n\n    return user;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 로그인\nexport const signIn = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(\n      auth,\n      email,\n      password\n    );\n    return userCredential.user;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 로그아웃\nexport const logOut = async () => {\n  try {\n    await signOut(auth);\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 사용자 정보 가져오기\nexport const getUserInfo = async (userId) => {\n  try {\n    const userDoc = await getDoc(doc(db, \"users\", userId));\n    if (userDoc.exists()) {\n      return userDoc.data();\n    } else {\n      return null;\n    }\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 인증 상태 변화 감지\nexport const onAuthStateChange = (callback) => {\n  return onAuthStateChanged(auth, callback);\n};\n"],"mappings":"AAAA,SACEA,8BAA8B,EAC9BC,0BAA0B,EAC1BC,OAAO,EACPC,aAAa,EACbC,kBAAkB,QACb,eAAe;AACtB,SAASC,IAAI,EAAEC,EAAE,QAAQ,UAAU;AACnC,SAASC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;;AAExD;AACA,OAAO,MAAMC,MAAM,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,KAAK;EACzD,IAAI;IACF,MAAMC,cAAc,GAAG,MAAMd,8BAA8B,CACzDK,IAAI,EACJM,KAAK,EACLC,QACF,CAAC;IACD,MAAMG,IAAI,GAAGD,cAAc,CAACC,IAAI;;IAEhC;IACA,MAAMZ,aAAa,CAACY,IAAI,EAAE;MACxBC,WAAW,EAAEH,QAAQ,CAACI;IACxB,CAAC,CAAC;;IAEF;IACA,MAAMT,MAAM,CAACD,GAAG,CAACD,EAAE,EAAE,OAAO,EAAES,IAAI,CAACG,GAAG,CAAC,EAAE;MACvCD,IAAI,EAAEJ,QAAQ,CAACI,IAAI;MACnBN,KAAK,EAAEE,QAAQ,CAACF,KAAK;MACrBQ,KAAK,EAAEN,QAAQ,CAACM,KAAK;MACrBC,WAAW,EAAEP,QAAQ,CAACO,WAAW;MACjCC,cAAc,EAAER,QAAQ,CAACQ,cAAc;MACvCC,cAAc,EAAET,QAAQ,CAACS,cAAc;MACvCC,cAAc,EAAEV,QAAQ,CAACU,cAAc;MACvCC,iBAAiB,EAAEX,QAAQ,CAACW,iBAAiB;MAC7CC,YAAY,EAAEZ,QAAQ,CAACY,YAAY;MACnCC,aAAa,EAAEb,QAAQ,CAACa,aAAa;MACrCC,WAAW,EAAEd,QAAQ,CAACc,WAAW;MACjCC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;MACrBC,SAAS,EAAE,IAAID,IAAI,CAAC;IACtB,CAAC,CAAC;IAEF,OAAOd,IAAI;EACb,CAAC,CAAC,OAAOgB,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,MAAM,GAAG,MAAAA,CAAOrB,KAAK,EAAEC,QAAQ,KAAK;EAC/C,IAAI;IACF,MAAME,cAAc,GAAG,MAAMb,0BAA0B,CACrDI,IAAI,EACJM,KAAK,EACLC,QACF,CAAC;IACD,OAAOE,cAAc,CAACC,IAAI;EAC5B,CAAC,CAAC,OAAOgB,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,MAAM,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAI;IACF,MAAM/B,OAAO,CAACG,IAAI,CAAC;EACrB,CAAC,CAAC,OAAO0B,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,WAAW,GAAG,MAAOC,MAAM,IAAK;EAC3C,IAAI;IACF,MAAMC,OAAO,GAAG,MAAM3B,MAAM,CAACF,GAAG,CAACD,EAAE,EAAE,OAAO,EAAE6B,MAAM,CAAC,CAAC;IACtD,IAAIC,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;MACpB,OAAOD,OAAO,CAACE,IAAI,CAAC,CAAC;IACvB,CAAC,MAAM;MACL,OAAO,IAAI;IACb;EACF,CAAC,CAAC,OAAOP,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMQ,iBAAiB,GAAIC,QAAQ,IAAK;EAC7C,OAAOpC,kBAAkB,CAACC,IAAI,EAAEmC,QAAQ,CAAC;AAC3C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}