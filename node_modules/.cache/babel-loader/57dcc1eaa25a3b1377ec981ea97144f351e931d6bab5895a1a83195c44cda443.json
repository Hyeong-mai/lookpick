{"ast":null,"code":"import { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, updateProfile, onAuthStateChanged } from \"firebase/auth\";\nimport { auth, db } from \"./config\";\nimport { doc, setDoc, getDoc } from \"firebase/firestore\";\n\n// 회원가입\nexport const signUp = async (email, password, userInfo) => {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n    const user = userCredential.user;\n\n    // 프로필 업데이트\n    await updateProfile(user, {\n      displayName: userInfo.name\n    });\n\n    // Firestore에 사용자 정보 저장\n    await setDoc(doc(db, \"users\", user.uid), {\n      name: userInfo.name,\n      email: userInfo.email,\n      phone: userInfo.phone,\n      companyName: userInfo.companyName,\n      businessNumber: userInfo.businessNumber,\n      representative: userInfo.representative,\n      companyAddress: userInfo.companyAddress,\n      establishmentDate: userInfo.establishmentDate,\n      businessType: userInfo.businessType,\n      businessField: userInfo.businessField,\n      managerName: userInfo.managerName,\n      businessCertificateUrl: userInfo.businessCertificateUrl || null,\n      isDocumentPending: userInfo.isDocumentPending || false,\n      phoneVerified: userInfo.phoneVerified || false,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    });\n    return user;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 로그인\nexport const signIn = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    return userCredential.user;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 로그아웃\nexport const logOut = async () => {\n  try {\n    await signOut(auth);\n\n    // 로컬 스토리지 클리어\n    localStorage.removeItem(\"authData\");\n    localStorage.removeItem(\"isLoggedIn\");\n    console.log(\"로그아웃 완료 및 로컬 스토리지 클리어\");\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 로컬 스토리지에서 인증 데이터 가져오기\nexport const getAuthDataFromStorage = () => {\n  try {\n    const authData = localStorage.getItem(\"authData\");\n    const isLoggedIn = localStorage.getItem(\"isLoggedIn\");\n    if (authData && isLoggedIn === \"true\") {\n      return JSON.parse(authData);\n    }\n    return null;\n  } catch (error) {\n    console.error(\"로컬 스토리지에서 인증 데이터 읽기 실패:\", error);\n    return null;\n  }\n};\n\n// 로컬 스토리지에 인증 데이터 저장\nexport const saveAuthDataToStorage = async user => {\n  try {\n    // Firebase 토큰 가져오기\n    const token = await user.getIdToken();\n\n    // Firestore에서 사용자 상세 정보 가져오기\n    const userInfo = await getUserInfo(user.uid);\n\n    // 로컬 스토리지에 저장할 데이터 구성\n    const authData = {\n      token: token,\n      user: {\n        uid: user.uid,\n        email: user.email,\n        displayName: user.displayName,\n        emailVerified: user.emailVerified\n      },\n      userInfo: userInfo,\n      loginTime: new Date().toISOString()\n    };\n    localStorage.setItem(\"authData\", JSON.stringify(authData));\n    localStorage.setItem(\"isLoggedIn\", \"true\");\n    console.log(\"로컬 스토리지에 인증 데이터 저장 완료\");\n    return authData;\n  } catch (error) {\n    console.error(\"로컬 스토리지 저장 실패:\", error);\n    throw error;\n  }\n};\n\n// 로그인 상태 확인\nexport const isUserLoggedIn = () => {\n  const isLoggedIn = localStorage.getItem(\"isLoggedIn\");\n  const authData = localStorage.getItem(\"authData\");\n  return isLoggedIn === \"true\" && authData !== null;\n};\n\n// 토큰 갱신\nexport const refreshAuthToken = async () => {\n  try {\n    const currentUser = auth.currentUser;\n    if (currentUser) {\n      const newToken = await currentUser.getIdToken(true); // force refresh\n\n      const authData = getAuthDataFromStorage();\n      if (authData) {\n        authData.token = newToken;\n        authData.refreshTime = new Date().toISOString();\n        localStorage.setItem(\"authData\", JSON.stringify(authData));\n        console.log(\"토큰 갱신 완료\");\n        return newToken;\n      }\n    }\n    return null;\n  } catch (error) {\n    console.error(\"토큰 갱신 실패:\", error);\n    throw error;\n  }\n};\n\n// 사용자 정보 가져오기\nexport const getUserInfo = async userId => {\n  try {\n    const userDoc = await getDoc(doc(db, \"users\", userId));\n    if (userDoc.exists()) {\n      return userDoc.data();\n    } else {\n      return null;\n    }\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 인증 상태 변화 감지\nexport const onAuthStateChange = callback => {\n  return onAuthStateChanged(auth, callback);\n};\n\n// 현재 사용자 토큰 가져오기\nexport const getCurrentUserToken = () => {\n  const authData = getAuthDataFromStorage();\n  return authData ? authData.token : null;\n};\n\n// 현재 사용자 정보 가져오기\nexport const getCurrentUser = () => {\n  const authData = getAuthDataFromStorage();\n  return authData ? authData.user : null;\n};\n\n// 현재 사용자 상세 정보 가져오기\nexport const getCurrentUserInfo = () => {\n  const authData = getAuthDataFromStorage();\n  return authData ? authData.userInfo : null;\n};\n\n// 로그인 시간 가져오기\nexport const getLoginTime = () => {\n  const authData = getAuthDataFromStorage();\n  return authData ? authData.loginTime : null;\n};","map":{"version":3,"names":["createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","updateProfile","onAuthStateChanged","auth","db","doc","setDoc","getDoc","signUp","email","password","userInfo","userCredential","user","displayName","name","uid","phone","companyName","businessNumber","representative","companyAddress","establishmentDate","businessType","businessField","managerName","businessCertificateUrl","isDocumentPending","phoneVerified","createdAt","Date","updatedAt","error","signIn","logOut","localStorage","removeItem","console","log","getAuthDataFromStorage","authData","getItem","isLoggedIn","JSON","parse","saveAuthDataToStorage","token","getIdToken","getUserInfo","emailVerified","loginTime","toISOString","setItem","stringify","isUserLoggedIn","refreshAuthToken","currentUser","newToken","refreshTime","userId","userDoc","exists","data","onAuthStateChange","callback","getCurrentUserToken","getCurrentUser","getCurrentUserInfo","getLoginTime"],"sources":["/Users/phillip/application/LookPick/src/firebase/auth.js"],"sourcesContent":["import {\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signOut,\n  updateProfile,\n  onAuthStateChanged,\n} from \"firebase/auth\";\nimport { auth, db } from \"./config\";\nimport { doc, setDoc, getDoc } from \"firebase/firestore\";\n\n// 회원가입\nexport const signUp = async (email, password, userInfo) => {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(\n      auth,\n      email,\n      password\n    );\n    const user = userCredential.user;\n\n    // 프로필 업데이트\n    await updateProfile(user, {\n      displayName: userInfo.name,\n    });\n\n    // Firestore에 사용자 정보 저장\n    await setDoc(doc(db, \"users\", user.uid), {\n      name: userInfo.name,\n      email: userInfo.email,\n      phone: userInfo.phone,\n      companyName: userInfo.companyName,\n      businessNumber: userInfo.businessNumber,\n      representative: userInfo.representative,\n      companyAddress: userInfo.companyAddress,\n      establishmentDate: userInfo.establishmentDate,\n      businessType: userInfo.businessType,\n      businessField: userInfo.businessField,\n      managerName: userInfo.managerName,\n      businessCertificateUrl: userInfo.businessCertificateUrl || null,\n      isDocumentPending: userInfo.isDocumentPending || false,\n      phoneVerified: userInfo.phoneVerified || false,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    });\n\n    return user;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 로그인\nexport const signIn = async (email, password) => {\n  try {\n    const userCredential = await signInWithEmailAndPassword(\n      auth,\n      email,\n      password\n    );\n    return userCredential.user;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 로그아웃\nexport const logOut = async () => {\n  try {\n    await signOut(auth);\n\n    // 로컬 스토리지 클리어\n    localStorage.removeItem(\"authData\");\n    localStorage.removeItem(\"isLoggedIn\");\n\n    console.log(\"로그아웃 완료 및 로컬 스토리지 클리어\");\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 로컬 스토리지에서 인증 데이터 가져오기\nexport const getAuthDataFromStorage = () => {\n  try {\n    const authData = localStorage.getItem(\"authData\");\n    const isLoggedIn = localStorage.getItem(\"isLoggedIn\");\n\n    if (authData && isLoggedIn === \"true\") {\n      return JSON.parse(authData);\n    }\n    return null;\n  } catch (error) {\n    console.error(\"로컬 스토리지에서 인증 데이터 읽기 실패:\", error);\n    return null;\n  }\n};\n\n// 로컬 스토리지에 인증 데이터 저장\nexport const saveAuthDataToStorage = async (user) => {\n  try {\n    // Firebase 토큰 가져오기\n    const token = await user.getIdToken();\n\n    // Firestore에서 사용자 상세 정보 가져오기\n    const userInfo = await getUserInfo(user.uid);\n\n    // 로컬 스토리지에 저장할 데이터 구성\n    const authData = {\n      token: token,\n      user: {\n        uid: user.uid,\n        email: user.email,\n        displayName: user.displayName,\n        emailVerified: user.emailVerified,\n      },\n      userInfo: userInfo,\n      loginTime: new Date().toISOString(),\n    };\n\n    localStorage.setItem(\"authData\", JSON.stringify(authData));\n    localStorage.setItem(\"isLoggedIn\", \"true\");\n\n    console.log(\"로컬 스토리지에 인증 데이터 저장 완료\");\n    return authData;\n  } catch (error) {\n    console.error(\"로컬 스토리지 저장 실패:\", error);\n    throw error;\n  }\n};\n\n// 로그인 상태 확인\nexport const isUserLoggedIn = () => {\n  const isLoggedIn = localStorage.getItem(\"isLoggedIn\");\n  const authData = localStorage.getItem(\"authData\");\n\n  return isLoggedIn === \"true\" && authData !== null;\n};\n\n// 토큰 갱신\nexport const refreshAuthToken = async () => {\n  try {\n    const currentUser = auth.currentUser;\n    if (currentUser) {\n      const newToken = await currentUser.getIdToken(true); // force refresh\n\n      const authData = getAuthDataFromStorage();\n      if (authData) {\n        authData.token = newToken;\n        authData.refreshTime = new Date().toISOString();\n        localStorage.setItem(\"authData\", JSON.stringify(authData));\n        console.log(\"토큰 갱신 완료\");\n        return newToken;\n      }\n    }\n    return null;\n  } catch (error) {\n    console.error(\"토큰 갱신 실패:\", error);\n    throw error;\n  }\n};\n\n// 사용자 정보 가져오기\nexport const getUserInfo = async (userId) => {\n  try {\n    const userDoc = await getDoc(doc(db, \"users\", userId));\n    if (userDoc.exists()) {\n      return userDoc.data();\n    } else {\n      return null;\n    }\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 인증 상태 변화 감지\nexport const onAuthStateChange = (callback) => {\n  return onAuthStateChanged(auth, callback);\n};\n\n// 현재 사용자 토큰 가져오기\nexport const getCurrentUserToken = () => {\n  const authData = getAuthDataFromStorage();\n  return authData ? authData.token : null;\n};\n\n// 현재 사용자 정보 가져오기\nexport const getCurrentUser = () => {\n  const authData = getAuthDataFromStorage();\n  return authData ? authData.user : null;\n};\n\n// 현재 사용자 상세 정보 가져오기\nexport const getCurrentUserInfo = () => {\n  const authData = getAuthDataFromStorage();\n  return authData ? authData.userInfo : null;\n};\n\n// 로그인 시간 가져오기\nexport const getLoginTime = () => {\n  const authData = getAuthDataFromStorage();\n  return authData ? authData.loginTime : null;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}